// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Threading;
using System.Collections.Generic;
using System.Linq;

using Foundation;
using AppKit;
using CoreGraphics;

using OxyPlot;
using OxyPlot.Axes;
using OxyPlot.Series;
using OxyPlot.Xamarin.Mac;

namespace Plotter
{
    delegate double Function(double x);

	public partial class WindowController : NSWindowController
	{
        PlotModel model;
        LinearAxis xAxis;
        Mutex mutex;
        double min, max;
        string title;


        public WindowController (IntPtr handle) : base (handle)
		{
            mutex = new Mutex();
            min = 0;
            max = 0;
            title = "Lab 4 Task 1";
        }

        public override void WindowDidLoad()
        {
            base.WindowDidLoad();

            var frame = new CGRect(10, 10, 300, 300);
            PlotView plot = new PlotView(frame);
            model = new PlotModel { Title = title };

            xAxis = new LinearAxis { Position = AxisPosition.Bottom };
            xAxis.AxisChanged += Update;
            model.Axes.Add(xAxis);

            model.Axes.Add(new LinearAxis { Position = AxisPosition.Left });
            model.PlotType = PlotType.Cartesian;

            plot.Model = model;
            Window.ContentView = plot;

            Window.WeakDelegate = null;
            Window.WillClose += (sender, args) => mutex.Dispose();

            Window.Title = title;
        }

        private void Update(object sender, AxisChangedEventArgs args)
        {
            Thread[] threads = new Thread[3];

            threads[0] = new Thread(() => Target(Fn1, OxyColors.Red));
            threads[1] = new Thread(() => Target(Fn2, OxyColors.Green));
            threads[2] = new Thread(() => Target(Fn3, OxyColors.Blue));

            foreach (Thread t in threads)
                t.Start();

            foreach (Thread t in threads)
                t.Join();

            min = GetMinimum(1);
            max = GetMaximum(1);
        }

        private void Target(Function func, OxyColor color)
        {
            double step = 0.1;

            double x1 = GetMinimum(1);
            double x2 = GetMaximum(1);

            if (x1 < min)
            {
                List<DataPoint> points = new List<DataPoint>();
                double x = x1;
                while (x < min)
                {
                    double y = func(x);
                    points.Add(new DataPoint(x, y));
                    x += step;
                }
                mutex.WaitOne();
                AddLine(points, color);
                mutex.ReleaseMutex();
            }

            if (x2 > max)
            {
                List<DataPoint> points = new List<DataPoint>();
                double x = max;
                while (x < x2)
                {
                    double y = func(x);
                    points.Add(new DataPoint(x, y));
                    x += step;
                }
                mutex.WaitOne();
                AddLine(points, color);
                mutex.ReleaseMutex();
            }
        }

        private void AddLine(List<DataPoint> points, OxyColor color)
        {
            var line = new LineSeries();
            line.Color = color;
            line.Points.AddRange(points);
            model.Series.Add(line);
        }

        private double GetMinimum(int digits) => Math.Round(xAxis.ActualMinimum, digits);
        private double GetMaximum(int digits) => Math.Round(xAxis.ActualMaximum, digits);
    }
}
